// Binary Search
class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        vector<int> res;
        int size = arr.size();
        // Binary Search
        int left = 0, right = size - 1;
        int midd = 0;
        while(left <= right){
            midd = (left + right) / 2;
            if(arr[midd] == x)
                break;
            else if(arr[midd] < x)
                left = midd + 1;
            else
                right = midd - 1;
        }
        // Edge Cases
        if(midd > 0){
            left = midd - 1;
            right = midd;
        }
        else{
            left = midd;
            right = midd + 1;
        }
        
        // **Left number has higher priority***
        // Try to expand from the middle
        while(left >= 0 && right < size && k > 0){
            if(abs(x - arr[left]) <= abs(x - arr[right]))
                res.push_back(arr[left--]);
            else
                res.push_back(arr[right++]);
            k--;
        }
        // Fill with left first
        while(left >= 0 && k > 0){
            res.push_back(arr[left--]);
            k--;
        }
        // Finally fill with right
        while(right < size && k > 0){
            res.push_back(arr[right++]);
            k--;
        }
        sort(res.begin(), res.end());
        return res;
    }

};

// Heap(pair<abs diff, value>)
class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        vector<int> res;
        priority_queue<pair<int, int>> pq;
        for(int i=0; i<arr.size(); i++){
            pq.push({abs(x - arr[i]), arr[i]});
            if(pq.size() == k + 1)
                pq.pop();
        }
        while(!pq.empty()){
            res.push_back(pq.top().second);
            pq.pop();
        }
        sort(res.begin(), res.end());
        return res;
    }
};
