/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 // Fast & Slow Pointer
 class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *slow = head;
        ListNode *fast = head;
        while(fast != nullptr && fast->next != nullptr){
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }
};

/* Single Pointer
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        int count = 0;
        ListNode *iter = head;
        while(iter != nullptr){
            iter = iter->next;
            count++;
        }
        count = count / 2;
        cout<<count<<endl;
        iter = head;
        while(count != 0){
            iter = iter->next;
            count--;
        }
        return iter;
    }
};
*/
