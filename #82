/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head) return nullptr;
        if(!head->next) return head;

        ListNode *prev = head, *curr = head->next;
        while(curr && prev->val == curr->val){
            while(curr && prev->val == curr->val){
                // cout<<curr->val<<endl;            
                curr = curr->next;
                prev->next = curr;
            }
            head = head->next;
            prev = head;
            if(curr) curr = curr->next;
        }
        if(!curr) return head;

        while(curr->next != nullptr){
            if(curr->val == curr->next->val){
                while(curr->next && curr->val == curr->next->val){
                    curr = curr->next;
                } 
                prev->next = curr->next;
                if(prev->next != nullptr){   
                    curr = curr->next;
                }
                else break;     
            }
            
            else{
                prev = curr;
                curr = curr->next;
            }
        }
        return head;
    }     
};
