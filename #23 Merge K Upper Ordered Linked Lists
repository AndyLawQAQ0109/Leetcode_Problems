/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0) return nullptr;
        else if(lists.size() == 1) return lists[0];
        return mergeKListsRecur(lists[0], lists, 1);

        // return mergeTwo(lists[0], lists[1]);
        // ListNode *fst = mergeTwo(lists[0], lists[1]);
        // return mergeTwo(fst, lists[2]);
    }
    ListNode* mergeKListsRecur(ListNode *prev, vector<ListNode*>& lists, int index){
        if(index == lists.size() - 1)
            return mergeTwo(prev, lists[index]);
        else
            return mergeKListsRecur(mergeTwo(prev, lists[index]), lists, index+1);
    }
    ListNode* mergeTwo(ListNode *first, ListNode *second){
        ListNode *ans;
        if(first == nullptr) return second;
        else if(second == nullptr) return first;
        else{
            if(second->val >= first->val) ans = first;
            else ans = second;
            for(ListNode *curr1 = first, *curr2 = second; curr1 != nullptr && curr2 != nullptr;){
                if(curr2->val >= curr1->val){
                    while(curr1->next != nullptr && curr1->val <= curr2->val && curr1->next->val <= curr2->val)
                        curr1 = curr1->next;
                    ListNode *tmp1 = curr1->next;
                    curr1->next = curr2;
                    curr1 = tmp1;
                }
                else{
                    while(curr2->next != nullptr && curr2->val < curr1->val && curr2->next->val < curr1->val)
                        curr2 = curr2->next;
                    ListNode *tmp2 = curr2->next;
                    curr2->next = curr1;
                    curr2 = tmp2;
                }
            }
            return ans;
        }
        
    }
};
