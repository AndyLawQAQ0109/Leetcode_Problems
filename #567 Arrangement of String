class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if(s1.size() > s2.size()) return false;

        unordered_map<char, int> needs;
        unordered_map<char, int> window;
        vector<int> AllLeft;
        for(char c : s1)
            needs[c]++;
        
        int matched = 0;
        int left, right;
        for(left = 0, right = 0; right < s2.length();){
            char c = s2[right];
            if(needs.count(c)){
                window[c]++;
                if(needs[c] == window[c])
                    matched++;
            }
            right++;
            bool incrLeft = false;
            while(matched == needs.size() && left < right){
                char c2 = s2[left];
                if(needs.count(c2)){
                    window[c2]--;
                    if(needs[c2] > window[c2]){
                        window[c2]++;
                        break;
                    }
                }
                incrLeft = true;
                left++;
            }
            if(incrLeft)
                AllLeft.push_back(left);
            else{
                if(!count(AllLeft.begin(), AllLeft.end(), left))
                    AllLeft.push_back(left);
            }
        }

        int s1Size = s1.size();
        for(int i=0; i<AllLeft.size(); i++){
            int index = AllLeft[i];
            unordered_map<char, int> tmp;
            for(int j=index; j<index+s1Size && j<s2.size(); j++){
                if(!needs.count(s2[j]))
                    break;
                else
                    tmp[s2[j]]++;
            }
            if(tmp == needs) return true;
        }
        return false;
    }
};
