class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int maxArea = 0;
        int rows = grid.size();
        int columns = grid[0].size();
        for(int i=0; i<rows; i++){
            for(int j=0; j<columns; j++){
                int value = grid[i][j];
                if(value == 1){
                    int currMax = dfs(grid, i, j, 2);
                    maxArea = currMax > maxArea ? currMax : maxArea;
                    cout<<maxArea<<" at index ["<<i <<", "<<j<<"]\n";
                }
            }
        }
        return (maxArea) - 2 >= 0 ? (maxArea - 2) : 0;
    }
    int dfs(vector<vector<int>>& grid, int i, int j, int newValue){
        if(grid[i][j] == 1) grid[i][j] = newValue;
        else return newValue;

        int rows = grid.size();
        int columns = grid[0].size();
        int tmp = newValue + 1;
        if(i - 1 >= 0) tmp = dfs(grid, i-1, j, newValue + 1);
        if(i + 1 < rows) tmp = dfs(grid, i+1, j, tmp);
        if(j - 1 >= 0) tmp = dfs(grid, i, j-1, tmp);
        if(j + 1 < columns) tmp = dfs(grid, i, j+1, tmp);
        return tmp;
    }
};
