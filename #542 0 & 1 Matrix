class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int m = mat.size();
        int n = mat[0].size();
        vector<vector<int>> res(m, vector<int>(n));
        vector<vector<int>> visited(m, vector<int>(n, 0));

        queue<pair<int, int>> q;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(mat[i][j] == 0){
                    q.emplace(i, j);
                    visited[i][j] = 1;
                }
            }
        }

        while(!q.empty()){
            auto [i, j] = q.front();
            q.pop();
            if(i - 1 >= 0 && visited[i-1][j] == 0){
                res[i-1][j] = res[i][j] + 1;
                q.emplace(i-1, j);
                visited[i-1][j] = 1;
            }
            if(i + 1 < m && visited[i+1][j] == 0){
                res[i+1][j] = res[i][j] + 1;
                q.emplace(i+1, j);
                visited[i+1][j] = 1;
            }
            if(j - 1 >= 0 && visited[i][j-1] == 0){
                res[i][j-1] = res[i][j] + 1;
                q.emplace(i, j-1);
                visited[i][j-1] = 1;
            }
            if(j + 1 < n && visited[i][j+1] == 0){
                res[i][j+1] = res[i][j] + 1;
                q.emplace(i, j+1);
                visited[i][j+1] = 1;
            }
        }
        return res;
    }
};
