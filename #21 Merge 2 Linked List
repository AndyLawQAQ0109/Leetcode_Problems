/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
         ListNode *ans;
        if(list1 == nullptr) return list2;
        else if(list2 == nullptr) return list1;
        else{
            if(list2->val >= list1->val) ans = list1;
            else ans = list2;
            for(ListNode *curr1 = list1, *curr2 = list2; curr1 != nullptr && curr2 != nullptr;){
                if(curr2->val >= curr1->val){
                    while(curr1->next != nullptr && curr1->val <= curr2->val && curr1->next->val <= curr2->val)
                        curr1 = curr1->next;
                    ListNode *tmp1 = curr1->next;
                    curr1->next = curr2;
                    curr1 = tmp1;
                }
                else{
                    while(curr2->next != nullptr && curr2->val < curr1->val && curr2->next->val < curr1->val)
                        curr2 = curr2->next;
                    ListNode *tmp2 = curr2->next;
                    curr2->next = curr1;
                    curr2 = tmp2;
                }
            }
            return ans;
        }
    }
};
