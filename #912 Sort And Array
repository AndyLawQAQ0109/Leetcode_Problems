class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        return sortArrayRecurr(nums, 0, nums.size() - 1);
    }
    vector<int> sortArrayRecurr(vector<int>& nums, int b, int e){
        if(b == e) return {nums[b]};
        else if(e - b == 1){
            if(nums[b] <= nums[e]) return {nums[b],nums[e]};
            else return {nums[e], nums[b]};
        }
        else{
            int mid = (b + e) / 2;
            return merge(sortArrayRecurr(nums, b, mid), sortArrayRecurr(nums, mid + 1, e));
        }
    }
    vector<int> merge(vector<int> left, vector<int> right){
        vector<int> result;
        int i=0,j=0;
        for(; i<left.size() && j<right.size();){
            if(left[i] <= right[j]) result.push_back(left[i++]);
            else result.push_back(right[j++]);
        }
        while(i < left.size()) result.push_back(left[i++]);
        while(j < right.size()) result.push_back(right[j++]);
        return result;
    }
};
