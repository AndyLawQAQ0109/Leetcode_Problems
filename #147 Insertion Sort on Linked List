/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* insertionSortList(ListNode* head) {
        if(head->next == nullptr) return head;

        ListNode *iter = head->next;
        ListNode *prev = head;
        while(iter != nullptr){
            ListNode *next = iter->next;
            if(iter->val > prev->val){
                prev = iter;
                iter = iter->next;
                continue;
            }
            else{
                if(iter->val <= head->val){
                    prev->next = iter->next;
                    iter->next = head;
                    head = iter;
                    iter = next;
                }
                else{
                    // Find Position & Insert
                    ListNode *iter_next = iter->next;
                    ListNode *tmp = head;
                    ListNode *tmp2 = head->next;
                    while(tmp != prev){
                        if(tmp->val <= iter->val && tmp2->val >= iter->val){
                            iter->next = tmp2;
                            tmp->next = iter;
                            // tmp2->next = iter_next;
                            prev->next = iter_next;
                            iter = iter_next;
                            break;
                        }
                        else{
                            tmp = tmp->next;
                            tmp2 = tmp2->next;
                        }
                    }
                    // Insert at the begining & continue finding the position
                    
                    // prev->next = iter->next;
                    // iter->next = head->next;
                    // head->next = iter;

                    // ListNode *pos = iter->next;
                    // prev = head;
                    // while(pos != nullptr){
                    //     if(pos->val <= iter->val){
                    //         prev->next = pos;
                    //         iter->next = pos->next;
                    //         pos->next = iter;
                    //         prev = pos;
                    //         pos = iter->next;
                    //     }
                    //     else{
                    //         prev = iter;
                    //         iter = iter->next;
                    //         break;
                    //     }
                    // }
                }
            }
        }
        return head;
    }
};
