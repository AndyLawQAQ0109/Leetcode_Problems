class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
        int gSize = garbage.size();
        int tSize = travel.size();
        
        vector<int> dp(tSize); // Storing time cost until the index
        dp[0] = travel[0];
        for(int i=1; i<tSize; i++)
            dp[i] = travel[i] + dp[i-1];
        
        // M, P, G
        vector<char> garb = {'M', 'P', 'G'};
        vector<int> garbIdx = {0, 0, 0}; // Ending index for each garbage
        int totalTime = 0;
        
        for(int i=0; i<3; i++){// Find ending index
            for(int j=gSize-1; j>=0; j--){
                if(garbage[j].find(garb[i]) != string::npos){
                    garbIdx[i] = j;
                    break;
                }
            }
        }

        for(int i=0; i<3; i++) // travel time cost
            totalTime += garbIdx[i] != 0 ? dp[garbIdx[i]-1] : 0; 
        
        for(int i=0; i<gSize; i++) // collecting time cost
            totalTime += garbage[i].size();
        return totalTime;
    }
};
