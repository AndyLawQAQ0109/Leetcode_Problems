/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        if(k == 1 && root->left == nullptr && root->right == nullptr)
            return root->val;
        if(k == count(root->left) + 1) return root->val;
        else if(k <= count(root->left)){
            return kthSmallest(root->left, k);
        }
        else{
            return kthSmallest(root->right, k - count(root->left) - 1);
        }
    }
    int count(TreeNode* root){
        if(root == nullptr) return 0;
        return count(root->left) + count(root->right) + 1;
    }
};
